"""
Написать два алгоритма нахождения i-го по счёту простого числа. Функция нахождения простого числа должна принимать на
вход натуральное и возвращать соответствующее простое число. Проанализировать скорость и сложность алгоритмов.

Первый — с помощью алгоритма «Решето Эратосфена».

Второй — без использования «Решета Эратосфена».
"""

import timeit
import cProfile

"""
Думаю, тут будет к месту небольшое пояснение. Я долго пытался придумать собственный способ нахождения размеров решета.
Я честно читал о простых числах и их распределении в вики, но, черт подери, там же просто таблица, где все написано, 
и вы эту таблицу уже использовали в своем решении ааа)) кроме того, придумать свою реализацию пи-функции в коде у меня 
не хватило мозгов - увы и ах, я всего-лишь тупой гуманитарий. когда ребята в чате пишут "пфф, эта легкотня была у нас на
первом курсе матанализа!", я могу лишь подумать о том, что у нас на "переводе и переводоведении" не было ни одного курса
матанализа, да что уж там - меня и логарифмы-то пугают) так что, в задачках с математикой я, как говорится, always at a
disadvantage. В общем и целом, я всего-лишь хочу сказать, что да, ваше решение на занятии натолкнуло меня на мысль об 
использовании словаря со значениями пи-функции с википедии, а тот факт, что мой ноутбук наглухо повис, пытаясь 
сгенерировать массив из миллиарда чисел (моя изначальная идея была, так сказать, "разрубить гордиев узел" - жестко 
задать одинаковый размер решета для всех вариантов, а не мучиться с определением его размера), лишь укрепил мою 
уверенность в использовании такого подхода. Тем не менее, раз вы использовали его в решении, которое продемонстрировали 
на занятии, и я делаю это задание уже после занятия, и я осведомлен о таком решении именно после просмотра вебинара, 
получается, что я так и так списал код у вас. Так что если это незачет, то что ж поделать...
"""


def sieve(n):
    primes_dict = {4: 10, 25: 10 ** 2, 168: 10 ** 3, 1229: 10 ** 4, 9592: 10 ** 5, 78498: 10 ** 6, 664579: 10 ** 7,
                   5761455: 10 ** 8}
    size = 0
    if n > 5761455:
        return f'Привет, я тупая функция, больше 5761455 простых чисел я не знаю ыы.'
    else:
        for key in primes_dict:
            if n <= key:
                size = primes_dict[key]
                break
    array = [i for i in range(size)]
    array[1] = 0
    for i in range(2, size):
        if array[i] != 0:
            """
            "На практике, алгоритм можно улучшить следующим образом. На шаге № 3 числа можно зачеркивать начиная сразу с
            числа p2, потому что все составные числа меньше него уже будут зачеркнуты к этому времени. И,
            соответственно, останавливать алгоритм можно, когда p2 станет больше, чем n."
            да ведь если просто читать эту статью на вики, то получается ваш код)) эх, доберись я до этого до
            занятия, был бы молодцом)
            """
            j = i ** 2
            while j < size:
                array[j] = 0
                j += i
    primes_array = [_ for _ in array if _ != 0]
    return primes_array[n - 1]


# ну что ж, проверим эту функцию
print(timeit.timeit('sieve(1)', number=1000, globals=globals()))  # 0.00700347700058046
print(timeit.timeit('sieve(10)', number=1000, globals=globals()))  # 0.03862268600005336
print(timeit.timeit('sieve(100)', number=1000, globals=globals()))  # 0.28713364099985483
print(timeit.timeit('sieve(1000)', number=1000, globals=globals()))  # 2.78327449399967
print(timeit.timeit('sieve(10000)', number=1000, globals=globals()))  # 389.1328042969999
print(timeit.timeit('sieve(100000)', number=1000, globals=globals()))  # 4154.073400252

cProfile.run('sieve(1)')
#         1    0.000    0.000    0.000    0.000 <string>:1(<module>)
#         1    0.000    0.000    0.000    0.000 task_2.py:32(sieve)
#         1    0.000    0.000    0.000    0.000 task_2.py:43(<listcomp>)
#         1    0.000    0.000    0.000    0.000 task_2.py:58(<listcomp>)
#         1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
cProfile.run('sieve(10)')
#         1    0.000    0.000    0.000    0.000 <string>:1(<module>)
#         1    0.000    0.000    0.000    0.000 task_2.py:32(sieve)
#         1    0.000    0.000    0.000    0.000 task_2.py:43(<listcomp>)
#         1    0.000    0.000    0.000    0.000 task_2.py:58(<listcomp>)
#         1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
cProfile.run('sieve(100)')
#         1    0.000    0.000    0.000    0.000 <string>:1(<module>)
#         1    0.000    0.000    0.000    0.000 task_2.py:32(sieve)
#         1    0.000    0.000    0.000    0.000 task_2.py:43(<listcomp>)
#         1    0.000    0.000    0.000    0.000 task_2.py:58(<listcomp>)
#         1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
cProfile.run('sieve(1000)')
#         1    0.000    0.000    0.004    0.004 <string>:1(<module>)
#         1    0.003    0.003    0.004    0.004 task_2.py:32(sieve)
#         1    0.001    0.001    0.001    0.001 task_2.py:43(<listcomp>)
#         1    0.000    0.000    0.000    0.000 task_2.py:58(<listcomp>)
#         1    0.000    0.000    0.004    0.004 {built-in method builtins.exec}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
cProfile.run('sieve(10000)')
#         1    0.007    0.007    0.390    0.390 <string>:1(<module>)
#         1    0.321    0.321    0.383    0.383 task_2.py:32(sieve)
#         1    0.036    0.036    0.036    0.036 task_2.py:43(<listcomp>)
#         1    0.027    0.027    0.027    0.027 task_2.py:58(<listcomp>)
#         1    0.000    0.000    0.390    0.390 {built-in method builtins.exec}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
cProfile.run('sieve(100000)')
#         1    0.066    0.066    4.036    4.036 <string>:1(<module>)
#         1    3.319    3.319    3.970    3.970 task_2.py:32(sieve)
#         1    0.386    0.386    0.386    0.386 task_2.py:43(<listcomp>)
#         1    0.266    0.266    0.266    0.266 task_2.py:58(<listcomp>)
#         1    0.000    0.000    4.036    4.036 {built-in method builtins.exec}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}

# второй вариант решения, без решета. бонусный уровень сложности - сделать его отличным от вашего решения)


def prime(n):  # генерация массива чисел тут точно такая же. не думаю, что это принципиально
    primes_dict = {4: 10, 25: 10 ** 2, 168: 10 ** 3, 1229: 10 ** 4, 9592: 10 ** 5, 78498: 10 ** 6, 664579: 10 ** 7,
                   5761455: 10 ** 8}
    size = 0
    if n > 5761455:
        return f'Привет, я тупая функция, больше 5761455 простых чисел я не знаю ыы.'
    else:
        for key in primes_dict:
            if n <= key:
                size = primes_dict[key]
                break
    array = [i for i in range(size)]
    array[1] = 0
    primes_array = []
    for k in range(2, size):
        d = 2
        while array[k] % d != 0:
            d += 1
        if array[k] == d:
            primes_array.append(array[k])
    return primes_array[n - 1]


# тестовую функцию я спер у вас, а то эту наивную функцию надо как-то проверить
def test_prime(func):
    real_prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,
                  103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,
                  211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
                  331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,
                  449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,
                  587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
                  709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839,
                  853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,
                  991, 997, 1009, 1013]

    for i, item in enumerate(real_prime, start=1):
        assert func(i) == item, f'Test {i} fail\t func({i}) = {func(i)}'
        print(f'Test {i} OK')


test_prime(prime)
# оно работает! я в шоке) ладно, теперь тесты.
# кстати, я сначала прогнал несколько раз тесты и заметил, что за счет более громоздкого вложенного цикла, время
# выполнения растет по экспоненте. поэтому тестов будет меньше, чем обычно
print(timeit.timeit('prime(1)', number=1000, globals=globals()))  # 0.005016414001147496
print(timeit.timeit('prime(10)', number=1000, globals=globals()))  # 0.09700173300007009
print(timeit.timeit('prime(100)', number=1000, globals=globals()))  # 5.955138221001107
print(timeit.timeit('prime(1000)', number=1000, globals=globals()))  # 488.5148652800017

cProfile.run('prime(1)')
#         1    0.000    0.000    0.000    0.000 <string>:1(<module>)
#         1    0.000    0.000    0.000    0.000 task_2.py:116(prime)
#         1    0.000    0.000    0.000    0.000 task_2.py:127(<listcomp>)
#         1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
#         4    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
cProfile.run('prime(10)')
#         1    0.000    0.000    0.000    0.000 <string>:1(<module>)
#         1    0.000    0.000    0.000    0.000 task_2.py:116(prime)
#         1    0.000    0.000    0.000    0.000 task_2.py:127(<listcomp>)
#         1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
#        25    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
cProfile.run('prime(100)')
#         1    0.000    0.000    0.006    0.006 <string>:1(<module>)
#         1    0.006    0.006    0.006    0.006 task_2.py:116(prime)
#         1    0.000    0.000    0.000    0.000 task_2.py:127(<listcomp>)
#         1    0.000    0.000    0.006    0.006 {built-in method builtins.exec}
#       168    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
cProfile.run('prime(1000)')
#         1    0.000    0.000    0.496    0.496 <string>:1(<module>)
#         1    0.495    0.495    0.496    0.496 task_2.py:116(prime)
#         1    0.000    0.000    0.000    0.000 task_2.py:127(<listcomp>)
#         1    0.000    0.000    0.496    0.496 {built-in method builtins.exec}
#      1229    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
cProfile.run('prime(10000)')
#         1    0.012    0.012 3250.912 3250.912 <string>:1(<module>)
#         1 3250.833 3250.833 3250.901 3250.901 task_2.py:116(prime)
#         1    0.038    0.038    0.038    0.038 task_2.py:127(<listcomp>)
#         1    0.000    0.000 3250.912 3250.912 {built-in method builtins.exec}
#     78498    0.029    0.000    0.029    0.000 {method 'append' of 'list' objects}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}

"""
вот это да) не думал, что прогон одной итерации в сипрофайле займет почти час) в общем, явный фаворит из двух вариантов
это решето! да, простенькая функция выигрывает по скорости на ОЧЕНЬ маленьких значениях, но уже на поиске тысячного 
числа она начинает кряхтеть и проигрывать.
"""
